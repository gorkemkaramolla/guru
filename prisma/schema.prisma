generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  at            String        @unique @db.VarChar(16)
  name          String        @db.VarChar(32)
  lastname      String        @db.VarChar(32)
  email         String        @unique @db.VarChar(255)
  password      String        @default("") @db.VarChar(255)
  register_date DateTime      @default(now())
  role          Role          @default(USER)
  profilePic    String        @db.VarChar(150)
  posts         Post[]
  comments      Comment[]
  post_likes    PostLike[]
  comment_likes CommentLike[]

  // Validation rules
  CategoryModerator CategoryModerator[]

  @@map("users")
}

model Category {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(32)
  Post              Post[]
  CategoryModerator CategoryModerator[]
}

model CategoryModerator {
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, category_id])
  @@map("category_moderators")
}

model Post {
  id          Int        @id @unique @default(autoincrement())
  at          String     @unique
  category_id Int
  category    Category   @relation(fields: [category_id], references: [id])
  title       String
  content     String     @db.VarChar(65000)
  description String     @db.VarChar(300)
  created_at  DateTime   @default(now())
  updated_at  DateTime?  @updatedAt
  user_id     Int
  tags        String?
  user        User       @relation(fields: [user_id], references: [id])
  comments    Comment[]
  likes       PostLike[]

  @@map("posts")
}

model PostLike {
  id      Int      @id @default(autoincrement())
  post_id Int
  post    Post     @relation(fields: [post_id], references: [id])
  user_id Int
  user    User     @relation(fields: [user_id], references: [id])
  vote    VoteType

  @@map("post_likes")
}

model Comment {
  id      Int           @id @default(autoincrement())
  message String        @db.VarChar(255)
  post_id Int
  post    Post          @relation(fields: [post_id], references: [id])
  user_id Int
  user    User          @relation(fields: [user_id], references: [id])
  likes   CommentLike[]

  @@map("comments")
}

model CommentLike {
  id         Int      @id @default(autoincrement())
  comment_id Int
  comment    Comment  @relation(fields: [comment_id], references: [id])
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  vote       VoteType

  @@map("comment_likes")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
